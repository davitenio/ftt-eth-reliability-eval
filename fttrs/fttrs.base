// Model of FTTRS: two interconnected switches with an embedded master each and
// port guardians.

ctmc


INCLUDE ../common.inc

// Failure rate of slave nodes.
const double slave_node_fr = 1/(6 * SEC_PER_MONTH);

// Total number of non-faulty slaves.
formula total_slave_count = (slave_2x_count + slave_1x_count);


// Failure rate of slave port.
const double slave_port_fr = 1/(24 * SEC_PER_MONTH);
// Failure rate of ethernet cable.
const double eth_cable_fr = 1/(48 * SEC_PER_MONTH);
// Failure rate of switch port.
const double switch_port_fr = 1/(24 * SEC_PER_MONTH);
// Failure rate of a port guardian.
const double portguardian_fr = 1/(24 * SEC_PER_MONTH);
// Slave link failure rate.
const double slave_link_fr = slave_port_fr + eth_cable_fr + switch_port_fr +
	ec_corruption_r + portguardian_fr;

const int LINKS_PER_SLAVE = 2;
const int NUM_LINKS = NUM_SLAVES * LINKS_PER_SLAVE;

// Percentage (expressed as a fraction) of non-faulty slaves that are attached
// to both switches.
formula slave_2x_fraction = (slave_2x_count/total_slave_count);
// Percentage (expressed as a fraction) of non-faulty slaves that are attached
// to one switch only.
formula slave_1x_fraction = (slave_1x_count/total_slave_count);

const int NUM_SWITCHES = 2;

module slave_nodes

	// Number of non-faulty slave nodes attached to both switches.
	slave_2x_count : [0..NUM_SLAVES] init NUM_SLAVES;
	// Number of non-faulty slave nodes attached to one switch only.
	slave_1x_count : [0..NUM_SLAVES] init 0;
	// Number of non-faulty slave links.
	link_count : [0..NUM_LINKS] init NUM_LINKS;

	[slave_2x_failed] !sys_failure &
		slave_2x_count > 0 &
		link_count > LINKS_PER_SLAVE ->
			slave_2x_count * slave_node_fr:
				(slave_2x_count'=slave_2x_count-1) &
				(link_count'=link_count-LINKS_PER_SLAVE);

	[slave_1x_failed] !sys_failure &
		slave_1x_count > 0 &
		link_count > 0 ->
			slave_1x_count * slave_node_fr:
				(slave_1x_count'=slave_1x_count-1) &
				(link_count'=link_count-1);

	[link_of_slave_2x_failed] !sys_failure &
		slave_2x_count > 0 &
		slave_1x_count < NUM_SLAVES &
		link_count > LINKS_PER_SLAVE ->
			slave_2x_fraction * link_count * slave_link_fr:
				(slave_2x_count'=slave_2x_count-1) &
				(slave_1x_count'=slave_1x_count+1) &
				(link_count'=link_count-1);

	[link_of_slave_1x_failed] !sys_failure &
		slave_1x_count > 0 &
		link_count > 0 ->
			slave_1x_fraction * link_count * slave_link_fr:
				(slave_1x_count'=slave_1x_count-1) &
				(link_count'=link_count-1);

#for i=0:NUM_SLAVES#
	[redundant_switch_failed] !sys_failure &
		switch_count = NUM_SWITCHES &
		slave_1x_count >= #i# &
		slave_1x_count <= NUM_SLAVES - slave_2x_count &
		link_count >= slave_2x_count + #i# ->
			1 : (slave_2x_count'=0) &
				(slave_1x_count'=total_slave_count - #i#) &
				(link_count'=link_count - slave_2x_count - #i#);
#end#

#for i=0:NUM_SLAVES#
	[all_interlinks_failed] !sys_failure &
		switch_count = NUM_SWITCHES &
		slave_1x_count >= #i# &
		slave_1x_count <= NUM_SLAVES - slave_2x_count &
		link_count >= slave_2x_count + #i# ->
			1 : (slave_2x_count'=0) &
				(slave_1x_count'=total_slave_count - #i#) &
				(link_count'=link_count - slave_2x_count - #i#);
#end#

endmodule


// Failure rate of master.
const double master_fr = 1/(12 * SEC_PER_MONTH);
// Failure rate of switch.
const double switch_fr = 1/(12 * SEC_PER_MONTH);
// Failure rate of switch region.
const double switch_region_fr = master_fr + switch_fr;

module switches

	switch_count : [0..NUM_SWITCHES] init NUM_SWITCHES;

	[redundant_switch_failed] !sys_failure &
			 switch_count > 1 ->
				switch_count * switch_region_fr :
					(switch_count'=switch_count-1);

	[all_switches_failed] !sys_failure &
			 switch_count = 1 ->
				switch_region_fr :
					(switch_count'=0);

	[all_interlinks_failed] !sys_failure ->
		1 : (switch_count'=1);

endmodule


const int NUM_INTERLINKS = 2;

const double interlink_fr = eth_cable_fr + 2*switch_port_fr;

module interlinks

	interlink_count : [0..NUM_INTERLINKS] init NUM_INTERLINKS;

	[single_interlink_failed] !sys_failure &
			 interlink_count > 1 ->
				interlink_count * interlink_fr:
					(interlink_count'=interlink_count-1);

	[all_interlinks_failed] !sys_failure &
			 interlink_count = 1 ->
				interlink_count * interlink_fr:
					(interlink_count'=0);

	[redundant_switch_failed] !sys_failure ->
		1 : (interlink_count'=0);

endmodule


// Number of required slaves for correct operation is exhausted.
formula slaves_exhausted = (total_slave_count < MIN_SLAVES);
// Number of required switches for correct operation is exhausted.
formula switches_exhausted = (switch_count = 0);
// Number of required interlinks for correct operation is exhausted.
formula interlinks_exhausted = (interlink_count=0);
// The system has suffered a failure.
formula sys_failure = slaves_exhausted | switches_exhausted;

// We need a label version of sys_failure because parametric
// model checking only works with labels and not with formulas.
label "sys_fail" = sys_failure;

INCLUDE ../rewards.inc
