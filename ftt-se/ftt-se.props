// Time
const double t;


// Reliability of the system at t minutes.
P=? [ G<=t*SEC_PER_MINUTE !sys_failure ]

// Reliability of the system at t hours.
P=? [ G<=t*SEC_PER_HOUR !sys_failure ]

// Reliability of the system at t days.
P=? [ G<=t*SEC_PER_DAY !sys_failure ]


// Probability that a failure of the master/switch region caused the system
// failure within t minutes. We specify this as the probability that before
// time t there is no system failure and that then at time t there is a
// master/switch region failure.
P=? [ !sys_failure U<=t*SEC_PER_MINUTE master_switch_region_failure ]

// Probability that a failure of the master/switch region caused the system
// failure within t hours.
P=? [ !sys_failure U<=t*SEC_PER_HOUR master_switch_region_failure ]

// Probability that a failure of the master/switch region caused the system
// failure within t days.
P=? [ !sys_failure U<=t*SEC_PER_DAY master_switch_region_failure ]

// Long-run probability that a failure of the master/switch region caused a
// system failure.
P=? [ !sys_failure U master_switch_region_failure ]

// Probability that a failure of too many slaves caused the system
// failure within t minutes. We specify this as the probability that before
// time t there is no system failure and that then at time t more slaves have
// failed than can be tolerated.
P=? [ !sys_failure U<=t*SEC_PER_MINUTE slaves_exhausted ]

// Probability that a failure of too many slaves caused the system
// failure within t hours.
P=? [ !sys_failure U<=t*SEC_PER_HOUR slaves_exhausted ]

// Probability that a failure of too many slaves caused the system
// failure within t days.
P=? [ !sys_failure U<=t*SEC_PER_DAY slaves_exhausted ]

// Long-run probability that a failure of too many slaves caused a system
// failure.
P=? [ !sys_failure U slaves_exhausted ]

// Expected mission time in minutes. We specify this as the expected amount of
// mission_time_rw reward accumulated until a state is reached that satisfies
// sys_fail.
R{"mission_time_rw_minutes"}=? [ F "sys_fail" ]

// Expected mission time in hours.
R{"mission_time_rw_hours"}=? [ F "sys_fail" ]

// Expected mission time in days.
R{"mission_time_rw_days"}=? [ F "sys_fail" ]

// Verify that the system always fails at some point in time.
A [ F sys_failure ]

// Check that the set of states sys_failure are absorbing. That is, that once a
// system failure occurs, the system does not become non-faulty again.
P>=1 [ F G sys_failure ]

// Probability of slave redundancy attrition occurring in the first t minutes.
P=? [ F<=t*SEC_PER_MINUTE s = MIN_SLAVES  & !sys_failure]

// Probability of slave redundancy attrition occurring in the first t hours.
P=? [ F<=t*SEC_PER_HOUR s = MIN_SLAVES  & !sys_failure]

// Probability of slave redundancy attrition occurring in the first t days.
P=? [ F<=t*SEC_PER_DAY s = MIN_SLAVES  & !sys_failure]
